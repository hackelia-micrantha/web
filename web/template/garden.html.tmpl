{{ define "content" }}

<div class="content">

<h1 class="title">Hybrid Schemaless Databases</h1>

<p>Databases typically follow three flavors: <b>NoSQL</b>, <b>Relational/SQL</b> and <b>Graph</b>.</p>

<p>Database synchronization with remote devices is usually through a backend API.  Depending on the implementation, this can be lacking or costly to make.</p>

<p>SaaS services like Firebase, <a href="https://www.couchbase.com/">Couchbase</a> and the now defunct <a href="https://github.com/cparse/cparse">cparse</a> (bought by Facebook) offer a new approach to data storage.
</p>

<p>
The API's and cloud services for the most part operate using JSON in a NoSQL fashion.  The data storage implementation is a black box in some cases and rewritten in others.
</p>

<h3>History</h3>
<p>
At <a href="https://www.epactnetwork.com/">another local startup</a>, I initially experimented with using a <b>hybrid relational database and schemaless</b> using <a href="https://www.sqlite.org/json1.html">JSON extensions for SQLite</a> - the industry de facto mobile database.  
</p>

<p>
This was quite pleasing to enable flexible user interfaces in this manner without changing to much of the data model or backend architecture.
</p>


<h3>Recently</h3>

<p>
Not too long ago an article from <a href="https://eng.uber.com/schemaless-part-one-mysql-datastore/">Uber engineering</a> described how they transitioned from postgres to a hybrid schemaless using <a href="https://dev.mysql.com/doc/refman/8.0/en/json.html">MySQL and JSON</a>. 
</p>

<p>
This was very inline with what I am attempting at <a href="https://micrantha.com/labratory">micrantha labs</a> with

<a href="https://www.postgresql.org/docs/9.3/functions-json.html">Postgres JSON extensions</a>.
</p>

<p>
Re-using relational database systems has some great benefits such as replication, scaling, backups, indexing, and reliability.</p>

<p>
JSON data types have been around enough to be considered stable.  Potential performance costs can be mitigated by customizing data back to SQL, allowing a pattern of prototyping and formalizing without too much architecture change.
</p>
  
<h3>Micrantha</h3>

<p>
<b>Garden</b> as is is called, is currently a database extension or plugin that makes it easier to perform basic CRUD using schemaless JSON on postgres.
</p>

<p>
Data is synchronized to devices across the <b>Pathway</b>, leveraging industry standard protocols in <a href="https://en.wikipedia.org/wiki/Internet_of_things">IoT</a>.
</p>

<p>
Users and administrators (gardeners) use the <b>Nursery</b> as the web frontend.
</p>

It aims to be:
<ul>
<li>efficient and lightweight</li>
<li>self-hostable and modular</li>
<li>network ready and secure</li>
<li>open source friendly</li>
</ul>

<p>
Using JSON as a single column for data in a relational database has some interesting features.  Such as indexing in some implementations, but also for hashing.  You can hash the entire data set for versioning and to detect changes.  
</p>

<p>
The <a href="https://tools.ietf.org/html/rfc7396">JSON merge patch RFC</a> makes it easy to update the data from multiple sources, 
</p>


<h3>Moving Forward</h3>

<p>
Moving towards <a href="https://en.wikipedia.org/wiki/Progressive_web_application">progressive web apps</a> for mobile, the <a href="https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/cache-api">storage api</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">indexedDB</a> will hopefully be able to meet expectations.
</p>

<p>
Micrantha is just a facade to justify my hobby time, and the garden in its entirety a long haul on my own (2040?).
</p>

<p>
Would just be extremely satisfying solution from a technical perspective.
</p>

</div>

{{ end }}
